name: Auto Deploy in VPS after Push to main

on:
  push:
    branches:
      - main
jobs:
  build:
    runs-on: ubuntu-latest
    name: Build and Push
    permissions:
      contents: write
    steps:
      - name: git-checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: 20.x

      - name: Install Dependencies
        run: yarn install --frozen-lockfile

      - name: Build Storybook Static
        run: yarn run build-storybook

      - name: Push
        uses: s0/git-publish-subdir-action@develop
        env:
          REPO: self
          BRANCH: build # The branch name where you want to push the assets
          FOLDER: storybook-static # The directory where your assets are generated
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GitHub will automatically add this - you don't need to bother getting a token
          MESSAGE: "Build: ({sha}) {msg}" # The commit message

  deploy:
    name: Deploy project with Nginx
    needs: build
    permissions:
      deployments: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: "actions/checkout@v4"
        with:
          ref: main
          token: ${{ secrets.PERSONAL_GITHUB_TOKEN }}

      - name: Create GitHub deployment
        uses: chrnorm/deployment-action@v2
        id: deployment
        with:
          token: "${{ github.token }}"
          environment-url: ${{ vars.MY_APP }}
          environment: production

      - name: Set up SSH Key and Deploy my App on Server
        uses: appleboy/ssh-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_GITHUB_TOKEN }}
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          port: 22
          script: |
            git config --global url."https://${{ secrets.PERSONAL_GITHUB_TOKEN }}:@github.com".insteadOf "https://github.com"
            cd htdocs/build
            git pull origin build

      - name: Update deployment Status (success)
        if: success()
        uses: chrnorm/deployment-status@v2
        with:
          token: "${{ github.token }}"
          environment-url: ${{ vars.MY_APP }}
          state: "success"
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}

      - name: Update deployment status (failure)
        if: failure()
        uses: chrnorm/deployment-status@v2
        with:
          token: "${{ github.token }}"
          environment-url: ${{ vars.MY_APP }}
          state: "failure"
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
